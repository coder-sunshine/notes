const READ = 1 // 0001
const WRITE = 1 << 1 // 0010
const UPDATE = 1 << 2 // 0100
const DELETE = 1 << 3 // 1000

// 权限组合 --> 使用 或运算
// 如果需要可读，可写，可删除权限，那么就只需要把对应的位置设置成1就行了，也就是 1011

// 也就是想要什么权限，就直接使用 或运算 计算就行了
const permission1 = READ | WRITE | DELETE
/**
 * 0001
 * 0010
 * 1000
 * -------
 * 只要一个位置为1，那么结果就为1
 * 1011
 */

console.log(permission1.toString(2)) // 1011

// 权限判断 --> 使用与运算
// 判断 permission1 是否有可删除权限
const res1 = permission1 & DELETE
/**
 * 1011
 * 1000
 * -------
 * 所有位置都为1，结果为1，否则为0
 * 1000
 */
console.log(res1.toString(2)) // 1000

// 权限删除 --> 使用异或运算
// 把 permission1 中的可删除权限删除
const res2 = permission1 ^ DELETE
/**
 * 1011
 * 1000
 * -------
 * 两个不同为1，否则为0
 * 0011
 */
console.log(res2.toString(2)) // 0011

// 这里有个问题，如果原来没有可删除权限，那么异或运算过后，就会有可删除权限了
/**
 * 0011 // 可读可写
 * 1000 // 可删除
 * -------
 * 两个不同为1，否则为0
 * 1011 // 这样异或过后就变成可读可写可删除了。
 */

// 等于说原来没有这个可删除权限，现在变成添加了，相等于就是添加的功能了，所以具体还需要到业务场景中判断，比如判断原来有，就是删除，原来没有的话，可以做添加等功能
